{
    "version": 3,
    "sources": [
        "components/Header.js",
        "components/Footer.js",
        "components/Note.js",
        "components/CreateArea.js",
        "components/App.js",
        "serviceWorker.js",
        "index.js"
    ],
    "names": [
        "Header",
        "Footer",
        "year",
        "Date",
        "getFullYear",
        "Note",
        "props",
        "className",
        "title",
        "content",
        "IconButton",
        "aria-label",
        "onClick",
        "deleteNote",
        "id",
        "fontSize",
        "CreateArea",
        "useState",
        "note",
        "setNote",
        "isOpen",
        "setOpen",
        "handleChange",
        "event",
        "target",
        "name",
        "value",
        "prevState",
        "onSubmit",
        "axios",
        "post",
        "then",
        "updateNotes",
        "catch",
        "err",
        "console",
        "log",
        "preventDefault",
        "onMouseOver",
        "onMouseOut",
        "autoComplete",
        "placeholder",
        "onChange",
        "hidden",
        "rows",
        "Zoom",
        "in",
        "Fab",
        "type",
        "App",
        "notes",
        "notesList",
        "setNotesList",
        "get",
        "res",
        "data",
        "delete",
        "useEffect",
        "map",
        "key",
        "_id",
        "Boolean",
        "window",
        "location",
        "hostname",
        "match",
        "ReactDOM",
        "render",
        "StrictMode",
        "document",
        "getElementById",
        "navigator",
        "serviceWorker",
        "ready",
        "registration",
        "unregister",
        "error",
        "message"
    ],
    "mappings": "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",
    "file": "static/js/main.20dd7e4c.chunk.js",
    "sourcesContent": [
        "import React from \"react\";\nimport HighlightIcon from '@material-ui/icons/Highlight';\n\nfunction Header() {\n  return (\n    <header>\n      <h1> <HighlightIcon/> Keeper </h1>\n    </header>\n  );\n}\n\nexport default Header;\n",
        "import React from \"react\"\n\nfunction Footer() {\n    const date = new Date();\n    const year = date.getFullYear()\n\n    return (\n        <footer>\n            <p>Copyright {year} flodardev</p>\n        </footer>\n    )\n}\n\nexport default Footer;",
        "import React from \"react\";\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport IconButton from '@material-ui/core/IconButton';\nimport { Fab, Zoom } from '@material-ui/core';\n\nfunction Note(props) {\n  return (\n    <div className=\"note\">\n        <h1>{props.title}</h1>\n        <p>{props.content}</p>\n        <IconButton aria-label=\"delete\" onClick={() => props.deleteNote(props.id)}>\n            <DeleteIcon fontSize=\"small\" />\n        </IconButton>\n    </div>\n  );\n}\n\nexport default Note;\n",
        "import React, { useState } from \"react\";\nimport AddIcon from '@material-ui/icons/Add';\nimport { Fab, Zoom } from '@material-ui/core';\nimport axios from \"axios\"\n\nfunction CreateArea(props) {\n    const [note, setNote] = useState({\n        title: \"\",\n        content: \"\"\n    });\n    const [isOpen, setOpen] = useState(false)\n\nfunction handleChange(event) {\nconst { name, value } = event.target;\nsetNote(prevState => {\n        return {\n        ...prevState,\n        [name]: value\n        };\n    });\n}\n\nfunction handleMousedOver() {\n    setOpen(true)\n}\n\nfunction handleMousedOut() {\n    setOpen(false)\n}\n\nfunction handleSubmit(event) {\n    // Connect to server and add to database\n    axios.post(\"/api/\", note)\n        .then(() => props.updateNotes(note),  setNote({\n            title: \"\",\n            content: \"\"\n            }))\n        .catch(err => console.log(err))\n\n    event.preventDefault();\n    setNote({\n    title: \"\",\n    content: \"\"\n    });\n}\n\nreturn (\n    <div>\n        <form\n        className=\"create-note\"\n        onSubmit={handleSubmit}\n        onMouseOver={handleMousedOver}\n        onMouseOut={handleMousedOut}\n        autoComplete=\"off\"\n        >\n        \n        <input\n            name=\"title\"\n            placeholder=\"Title\"\n            onChange={handleChange}\n            value={note.title}\n            hidden = {isOpen ? false : true}\n        />\n        <textarea\n            name=\"content\"\n            placeholder=\"Take a note...\"\n            rows= {isOpen ? 3 : 1}\n            onChange={handleChange}\n            value={note.content}\n        />\n        <Zoom in= {isOpen ? true : false}>\n            <Fab type=\"submit\"><AddIcon/></Fab>\n        </Zoom>\n        </form>\n    </div>\n    );\n}\n\nexport default CreateArea;\n",
        "import React, { useState, useEffect } from \"react\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport Note from \"./Note\";\nimport CreateArea from \"./CreateArea\";\nimport axios from \"axios\"\n\nfunction App() {\n  const [notesList, setNotesList] = useState({ notes: [] });\n\n  useEffect(() => {\n      axios.get(\"/api/\" || \"/api/\")\n      .then(res => {\n        setNotesList({ notes: res.data })\n      })\n      .catch(err => console.log(err))\n  }, [])\n\n  function updateNotes() {\n    // setNotesList({notes: [...notesList.notes, note]})\n    axios.get(\"/api/\" || \"/api/\")\n      .then(res => {\n        setNotesList({ notes: res.data })\n      })\n      .catch(err => console.log(err))\n  }\n\n  function deleteNote(id) {\n    axios.delete(\"/api/\" + id || \"/api\" + id)\n      .then(() => updateNotes())\n      .catch(err => console.log(err))\n  }\n\n  return (\n    <div>\n      <Header />\n      <CreateArea updateNotes={updateNotes} />\n      {notesList.notes.map((note) => {\n        return (\n          <Note\n            key={note._id}\n            id={note._id}\n            title={note.title}\n            content={note.content}\n            deleteNote={deleteNote}\n          />\n        );\n      })}\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n",
        "// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n",
        "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"
    ],
    "sourceRoot": ""
}